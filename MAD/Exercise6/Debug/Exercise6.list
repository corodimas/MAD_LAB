
Exercise6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004138  08004138  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  0800419c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800419c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb97  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb4  00000000  00000000  0002ec64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00030c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e0  00000000  00000000  000318c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002753f  00000000  00000000  000322a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109f7  00000000  00000000  000597df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f94b1  00000000  00000000  0006a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003978  00000000  00000000  00163688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00167000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080040ac 	.word	0x080040ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080040ac 	.word	0x080040ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x2c>)
 80005f8:	f043 0308 	orr.w	r3, r3, #8
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x2c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0308 	and.w	r3, r3, #8
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <displayTime>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void displayTime(uint32_t value)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	char output[20];
	int secound = value/1000;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <displayTime+0x58>)
 8000628:	fba2 2303 	umull	r2, r3, r2, r3
 800062c:	099b      	lsrs	r3, r3, #6
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
	int minute = secound/60;
 8000630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <displayTime+0x5c>)
 8000634:	fb82 1203 	smull	r1, r2, r2, r3
 8000638:	441a      	add	r2, r3
 800063a:	1152      	asrs	r2, r2, #5
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	623b      	str	r3, [r7, #32]
	sprintf(output, "current time is %d MM: %d SS\r",minute,secound);
 8000642:	f107 000c 	add.w	r0, r7, #12
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	6a3a      	ldr	r2, [r7, #32]
 800064a:	490c      	ldr	r1, [pc, #48]	; (800067c <displayTime+0x60>)
 800064c:	f003 f88a 	bl	8003764 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) output, strlen(output), 1000);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdf3 	bl	8000240 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <displayTime+0x64>)
 8000668:	f002 fbde 	bl	8002e28 <HAL_UART_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	10624dd3 	.word	0x10624dd3
 8000678:	88888889 	.word	0x88888889
 800067c:	080040c4 	.word	0x080040c4
 8000680:	20000118 	.word	0x20000118

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fad7 	bl	8000c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f814 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff ffac 	bl	80005ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000694:	f000 f936 	bl	8000904 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000698:	f000 f988 	bl	80009ac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800069c:	f000 fa14 	bl	8000ac8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x2c>)
 80006a2:	f001 fef9 	bl	8002498 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <main+0x30>)
 80006a8:	f001 fef6 	bl	8002498 <HAL_TIM_Base_Start_IT>
  while (1)
 80006ac:	e7fe      	b.n	80006ac <main+0x28>
 80006ae:	bf00      	nop
 80006b0:	20000080 	.word	0x20000080
 80006b4:	200000cc 	.word	0x200000cc

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f86c 	bl	80037a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000728:	2360      	movs	r3, #96	; 0x60
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800072c:	2306      	movs	r3, #6
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd97 	bl	8001270 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f820 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f82e 	bl	80017cc <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f809 	bl	800078c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x44>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	; 0x40
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x44>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x44>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x44>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x44>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007ce:	2005      	movs	r0, #5
 80007d0:	f000 fb60 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 fa42 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800083a:	f001 fea5 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  timer++;
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a02      	ldr	r2, [pc, #8]	; (8000850 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000846:	6013      	str	r3, [r2, #0]


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000080 	.word	0x20000080
 8000850:	20000078 	.word	0x20000078

08000854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <TIM2_IRQHandler+0x18>)
 800085a:	f001 fe95 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  displayTime(timer);
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <TIM2_IRQHandler+0x1c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff feda 	bl	800061c <displayTime>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000cc 	.word	0x200000cc
 8000870:	20000078 	.word	0x20000078

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f002 ff86 	bl	80037b4 <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20080000 	.word	0x20080000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	2000007c 	.word	0x2000007c
 80008dc:	200002f0 	.word	0x200002f0

080008e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SystemInit+0x20>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <SystemInit+0x20>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_TIM1_Init+0xa0>)
 8000924:	4a20      	ldr	r2, [pc, #128]	; (80009a8 <MX_TIM1_Init+0xa4>)
 8000926:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_TIM1_Init+0xa0>)
 800092a:	221f      	movs	r2, #31
 800092c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <MX_TIM1_Init+0xa0>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_TIM1_Init+0xa0>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_TIM1_Init+0xa0>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_TIM1_Init+0xa0>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_TIM1_Init+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <MX_TIM1_Init+0xa0>)
 8000950:	f001 fd4a 	bl	80023e8 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800095a:	f7ff ff17 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_TIM1_Init+0xa0>)
 800096c:	f001 ff2c 	bl	80027c8 <HAL_TIM_ConfigClockSource>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000976:	f7ff ff09 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_TIM1_Init+0xa0>)
 800098c:	f002 f952 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000996:	f7ff fef9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000080 	.word	0x20000080
 80009a8:	40010000 	.word	0x40010000

080009ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009d4:	221f      	movs	r2, #31
 80009d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000-1;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <MX_TIM2_Init+0x98>)
 80009e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <MX_TIM2_Init+0x94>)
 80009f2:	f001 fcf9 	bl	80023e8 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009fc:	f7ff fec6 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_TIM2_Init+0x94>)
 8000a0e:	f001 fedb 	bl	80027c8 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a18:	f7ff feb8 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_TIM2_Init+0x94>)
 8000a2a:	f002 f903 	bl	8002c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a34:	f7ff feaa 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3720      	adds	r7, #32
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000cc 	.word	0x200000cc
 8000a44:	00061a7f 	.word	0x00061a7f

08000a48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a1a      	ldr	r2, [pc, #104]	; (8000ac0 <HAL_TIM_Base_MspInit+0x78>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d114      	bne.n	8000a84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2101      	movs	r1, #1
 8000a76:	2019      	movs	r0, #25
 8000a78:	f000 fa17 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f000 fa30 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a82:	e018      	b.n	8000ab6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d113      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_TIM_Base_MspInit+0x7c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	201c      	movs	r0, #28
 8000aac:	f000 f9fd 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab0:	201c      	movs	r0, #28
 8000ab2:	f000 fa16 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ace:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MX_USART3_UART_Init+0x5c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART3_UART_Init+0x58>)
 8000b0c:	f002 f93e 	bl	8002d8c <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b16:	f7ff fe39 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000118 	.word	0x20000118
 8000b24:	40004800 	.word	0x40004800

08000b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ae      	sub	sp, #184	; 0xb8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2290      	movs	r2, #144	; 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fe2b 	bl	80037a4 <memset>
  if(uartHandle->Instance==USART3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_UART_MspInit+0xb4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d13c      	bne.n	8000bd2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f816 	bl	8001b98 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff fe0b 	bl	800078c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a19      	ldr	r2, [pc, #100]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_UART_MspInit+0xbc>)
 8000bce:	f000 f9a3 	bl	8000f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	37b8      	adds	r7, #184	; 0xb8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40004800 	.word	0x40004800
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bee:	490e      	ldr	r1, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c04:	4c0b      	ldr	r4, [pc, #44]	; (8000c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c12:	f7ff fe65 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 fdd3 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fd33 	bl	8000684 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c2c:	08004140 	.word	0x08004140
  ldr r2, =_sbss
 8000c30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c34:	200002ec 	.word	0x200002ec

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>

08000c3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f000 f928 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f805 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4a:	f7ff fda5 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f943 	bl	8000efe <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f90b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	200001a0 	.word	0x200001a0

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200001a0 	.word	0x200001a0

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	05fa0000 	.word	0x05fa0000

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e175      	b.n	8001224 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8164 	bne.w	800121e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x56>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80be 	beq.w	800121e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b66      	ldr	r3, [pc, #408]	; (800123c <HAL_GPIO_Init+0x324>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <HAL_GPIO_Init+0x324>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b63      	ldr	r3, [pc, #396]	; (800123c <HAL_GPIO_Init+0x324>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ba:	4a61      	ldr	r2, [pc, #388]	; (8001240 <HAL_GPIO_Init+0x328>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d037      	beq.n	8001156 <HAL_GPIO_Init+0x23e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a57      	ldr	r2, [pc, #348]	; (8001248 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d031      	beq.n	8001152 <HAL_GPIO_Init+0x23a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a56      	ldr	r2, [pc, #344]	; (800124c <HAL_GPIO_Init+0x334>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x236>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a55      	ldr	r2, [pc, #340]	; (8001250 <HAL_GPIO_Init+0x338>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x232>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a54      	ldr	r2, [pc, #336]	; (8001254 <HAL_GPIO_Init+0x33c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x22e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a53      	ldr	r2, [pc, #332]	; (8001258 <HAL_GPIO_Init+0x340>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x22a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x344>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x226>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_GPIO_Init+0x348>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x222>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_GPIO_Init+0x34c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x21e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x350>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x21a>
 800112e:	2309      	movs	r3, #9
 8001130:	e012      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001132:	230a      	movs	r3, #10
 8001134:	e010      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001136:	2308      	movs	r3, #8
 8001138:	e00e      	b.n	8001158 <HAL_GPIO_Init+0x240>
 800113a:	2307      	movs	r3, #7
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x240>
 800113e:	2306      	movs	r3, #6
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x240>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x240>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x240>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x328>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <HAL_GPIO_Init+0x354>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <HAL_GPIO_Init+0x354>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b32      	ldr	r3, [pc, #200]	; (800126c <HAL_GPIO_Init+0x354>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a29      	ldr	r2, [pc, #164]	; (800126c <HAL_GPIO_Init+0x354>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <HAL_GPIO_Init+0x354>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_GPIO_Init+0x354>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_GPIO_Init+0x354>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_GPIO_Init+0x354>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae86 	bls.w	8000f38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40021c00 	.word	0x40021c00
 8001264:	40022000 	.word	0x40022000
 8001268:	40022400 	.word	0x40022400
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e29b      	b.n	80017be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a0:	4b93      	ldr	r3, [pc, #588]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x62>
 80012ac:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x130>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e275      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x7a>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x9c>
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xc0>
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 8001330:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6b      	ldr	r2, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fcc4 	bl	8000cdc <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fcc0 	bl	8000cdc <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e229      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b61      	ldr	r3, [pc, #388]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fcb0 	bl	8000cdc <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcac 	bl	8000cdc <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e215      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x110>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d069      	beq.n	8001482 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x190>
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x17a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1e9      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	493d      	ldr	r1, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e040      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc62 	bl	8000cdc <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fc5e 	bl	8000cdc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1c7      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4929      	ldr	r1, [pc, #164]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc3e 	bl	8000cdc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc3a 	bl	8000cdc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1a3      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d038      	beq.n	8001500 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc1b 	bl	8000cdc <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc17 	bl	8000cdc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e180      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x23a>
 80014c8:	e01a      	b.n	8001500 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d6:	f7ff fc01 	bl	8000cdc <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014de:	f7ff fbfd 	bl	8000cdc <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d903      	bls.n	80014f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e166      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
 80014f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a4 	beq.w	8001656 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a88      	ldr	r2, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b86      	ldr	r3, [pc, #536]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001536:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff fbc5 	bl	8000cdc <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff fbc1 	bl	8000cdc <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b64      	cmp	r3, #100	; 0x64
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e12a      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x31a>
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	e02d      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x33c>
 8001592:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e01c      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x35e>
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a61      	ldr	r2, [pc, #388]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a5e      	ldr	r2, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fb75 	bl	8000cdc <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fb71 	bl	8000cdc <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0d8      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ee      	beq.n	80015f6 <HAL_RCC_OscConfig+0x386>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fb5f 	bl	8000cdc <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff fb5b 	bl	8000cdc <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0c2      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80ae 	beq.w	80017bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d06d      	beq.n	8001748 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d14b      	bne.n	800170c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb2c 	bl	8000cdc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fb28 	bl	8000cdc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e091      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	071b      	lsls	r3, r3, #28
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fafa 	bl	8000cdc <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff faf6 	bl	8000cdc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e05f      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x47c>
 800170a:	e057      	b.n	80017bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fae0 	bl	8000cdc <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fadc 	bl	8000cdc <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e045      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x4b0>
 800173e:	e03d      	b.n	80017bc <HAL_RCC_OscConfig+0x54c>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_RCC_OscConfig+0x558>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d030      	beq.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d129      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d122      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800177e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001780:	4293      	cmp	r3, r2
 8001782:	d119      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
 8001792:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d10f      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d0      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d910      	bls.n	8001814 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 020f 	bic.w	r2, r3, #15
 80017fa:	4965      	ldr	r1, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d040      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e073      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06b      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4936      	ldr	r1, [pc, #216]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa0c 	bl	8000cdc <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c8:	f7ff fa08 	bl	8000cdc <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e053      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d210      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 020f 	bic.w	r2, r3, #15
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1cc>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1d4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f968 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	080040e4 	.word	0x080040e4
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b090      	sub	sp, #64	; 0x40
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	2300      	movs	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80a1 	bhi.w	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e09b      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019dc:	e09b      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e2:	e098      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	627a      	str	r2, [r7, #36]	; 0x24
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a10:	fb03 f201 	mul.w	r2, r3, r1
 8001a14:	2300      	movs	r3, #0
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a24:	460a      	mov	r2, r1
 8001a26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	2200      	movs	r2, #0
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	61fa      	str	r2, [r7, #28]
 8001a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a3e:	f7fe fc57 	bl	80002f0 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4613      	mov	r3, r2
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4a:	e053      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	617a      	str	r2, [r7, #20]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a5e:	f04f 0b00 	mov.w	fp, #0
 8001a62:	4652      	mov	r2, sl
 8001a64:	465b      	mov	r3, fp
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a96:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	00eb      	lsls	r3, r5, #3
 8001aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aac:	00e2      	lsls	r2, r4, #3
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	eb14 030a 	adds.w	r3, r4, sl
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	eb45 030b 	adc.w	r3, r5, fp
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae8:	f7fe fc02 	bl	80002f0 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4613      	mov	r3, r2
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3740      	adds	r7, #64	; 0x40
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	017d7840 	.word	0x017d7840

08001b30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	080040f4 	.word	0x080040f4

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b74:	f7ff ffdc 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	080040f4 	.word	0x080040f4

08001b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bc0:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a68      	ldr	r2, [pc, #416]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bca:	6093      	str	r3, [r2, #8]
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	4964      	ldr	r1, [pc, #400]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	4959      	ldr	r1, [pc, #356]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c10:	d101      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d017      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	494a      	ldr	r1, [pc, #296]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 808b 	beq.w	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	; 0x40
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f81c 	bl	8000cdc <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7ff f818 	bl	8000cdc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e38f      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d035      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d02e      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d114      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7fe ffe0 	bl	8000cdc <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7fe ffdc 	bl	8000cdc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e351      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	4901      	ldr	r1, [pc, #4]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	0ffffcff 	.word	0x0ffffcff
 8001d74:	4bac      	ldr	r3, [pc, #688]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4aab      	ldr	r2, [pc, #684]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d7e:	6093      	str	r3, [r2, #8]
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	49a6      	ldr	r1, [pc, #664]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d010      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d9e:	4ba2      	ldr	r3, [pc, #648]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da4:	4aa0      	ldr	r2, [pc, #640]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001daa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dae:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	499b      	ldr	r1, [pc, #620]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dcc:	4b96      	ldr	r3, [pc, #600]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dda:	4993      	ldr	r1, [pc, #588]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dfc:	498a      	ldr	r1, [pc, #552]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e10:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1e:	4982      	ldr	r1, [pc, #520]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	4979      	ldr	r1, [pc, #484]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e54:	4b74      	ldr	r3, [pc, #464]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4971      	ldr	r1, [pc, #452]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f023 020c 	bic.w	r2, r3, #12
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	4968      	ldr	r1, [pc, #416]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e98:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4960      	ldr	r1, [pc, #384]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec8:	4957      	ldr	r1, [pc, #348]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001edc:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	494f      	ldr	r1, [pc, #316]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4946      	ldr	r1, [pc, #280]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	493e      	ldr	r1, [pc, #248]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f72:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f94:	4924      	ldr	r1, [pc, #144]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	4914      	ldr	r1, [pc, #80]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff8:	490b      	ldr	r1, [pc, #44]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201c:	4902      	ldr	r1, [pc, #8]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002024:	e002      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	4986      	ldr	r1, [pc, #536]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800205c:	4b81      	ldr	r3, [pc, #516]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206c:	497d      	ldr	r1, [pc, #500]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d006      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80d6 	beq.w	8002234 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a75      	ldr	r2, [pc, #468]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002092:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002094:	f7fe fe22 	bl	8000cdc <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800209c:	f7fe fe1e 	bl	8000cdc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e195      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d021      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11d      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	019a      	lsls	r2, r3, #6
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	071b      	lsls	r3, r3, #28
 8002102:	4958      	ldr	r1, [pc, #352]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02e      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002134:	d129      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800214a:	0f1b      	lsrs	r3, r3, #28
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	019a      	lsls	r2, r3, #6
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	071b      	lsls	r3, r3, #28
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002178:	f023 021f 	bic.w	r2, r3, #31
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	3b01      	subs	r3, #1
 8002182:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01d      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021aa:	0f1b      	lsrs	r3, r3, #28
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	019a      	lsls	r2, r3, #6
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	071b      	lsls	r3, r3, #28
 80021ca:	4926      	ldr	r1, [pc, #152]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	071b      	lsls	r3, r3, #28
 80021fa:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800220c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220e:	f7fe fd65 	bl	8000cdc <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002216:	f7fe fd61 	bl	8000cdc <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0d8      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	f040 80ce 	bne.w	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7fe fd48 	bl	8000cdc <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800224e:	e00b      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002250:	f7fe fd44 	bl	8000cdc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d904      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0bb      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002274:	d0ec      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12a      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	0f1b      	lsrs	r3, r3, #28
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	019a      	lsls	r2, r3, #6
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	4944      	ldr	r1, [pc, #272]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	493d      	ldr	r1, [pc, #244]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002308:	d11d      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	0e1b      	lsrs	r3, r3, #24
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	0f1b      	lsrs	r3, r3, #28
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4929      	ldr	r1, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	0e1b      	lsrs	r3, r3, #24
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	019a      	lsls	r2, r3, #6
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	041b      	lsls	r3, r3, #16
 8002378:	431a      	orrs	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	4917      	ldr	r1, [pc, #92]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	4911      	ldr	r1, [pc, #68]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b0:	f7fe fc94 	bl	8000cdc <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023b8:	f7fe fc90 	bl	8000cdc <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e007      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d6:	d1ef      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e049      	b.n	800248e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fb1a 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f000 faca 	bl	80029c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d001      	beq.n	80024b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e054      	b.n	800255a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_TIM_Base_Start_IT+0xd0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d022      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d01d      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_TIM_Base_Start_IT+0xd4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d018      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_TIM_Base_Start_IT+0xd8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_TIM_Base_Start_IT+0xdc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d00e      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_TIM_Base_Start_IT+0xe0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_TIM_Base_Start_IT+0xe4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x80>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_TIM_Base_Start_IT+0xe8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d115      	bne.n	8002544 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_TIM_Base_Start_IT+0xec>)
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d015      	beq.n	8002556 <HAL_TIM_Base_Start_IT+0xbe>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d011      	beq.n	8002556 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	e008      	b.n	8002556 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e000      	b.n	8002558 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002556:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40001800 	.word	0x40001800
 8002584:	00010007 	.word	0x00010007

08002588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9da 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9cc 	bl	8002970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f9dd 	bl	8002998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f9b0 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f9a2 	bl	8002970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f9b3 	bl	8002998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b08      	cmp	r3, #8
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0208 	mvn.w	r2, #8
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2204      	movs	r2, #4
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f986 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f978 	bl	8002970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f989 	bl	8002998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2208      	movs	r2, #8
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f95c 	bl	8002984 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f94e 	bl	8002970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f95f 	bl	8002998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0201 	mvn.w	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f928 	bl	800295c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fb16 	bl	8002d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002746:	d10e      	bne.n	8002766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d107      	bne.n	8002766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800275e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb09 	bl	8002d78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d10e      	bne.n	8002792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277e:	2b40      	cmp	r3, #64	; 0x40
 8002780:	d107      	bne.n	8002792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800278a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f90d 	bl	80029ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d10e      	bne.n	80027be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d107      	bne.n	80027be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f06f 0220 	mvn.w	r2, #32
 80027b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fac9 	bl	8002d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_ConfigClockSource+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e0b4      	b.n	800294e <HAL_TIM_ConfigClockSource+0x186>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4b56      	ldr	r3, [pc, #344]	; (8002958 <HAL_TIM_ConfigClockSource+0x190>)
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281c:	d03e      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xd4>
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	f200 8087 	bhi.w	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	f000 8086 	beq.w	800293a <HAL_TIM_ConfigClockSource+0x172>
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d87f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d01a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0xa6>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d87b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d050      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d877      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d03c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d873      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d058      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0x13a>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d86f      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d064      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d86b      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d060      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d867      	bhi.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d05c      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	2b10      	cmp	r3, #16
 800286a:	d05a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	e062      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800287e:	f000 f9b9 	bl	8002bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e04f      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028ac:	f000 f9a2 	bl	8002bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028be:	609a      	str	r2, [r3, #8]
      break;
 80028c0:	e03c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 f916 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2150      	movs	r1, #80	; 0x50
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f96f 	bl	8002bbe <TIM_ITRx_SetConfig>
      break;
 80028e0:	e02c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	461a      	mov	r2, r3
 80028f0:	f000 f935 	bl	8002b5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2160      	movs	r1, #96	; 0x60
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f95f 	bl	8002bbe <TIM_ITRx_SetConfig>
      break;
 8002900:	e01c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f8f6 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2140      	movs	r1, #64	; 0x40
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f94f 	bl	8002bbe <TIM_ITRx_SetConfig>
      break;
 8002920:	e00c      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f000 f946 	bl	8002bbe <TIM_ITRx_SetConfig>
      break;
 8002932:	e003      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
      break;
 8002938:	e000      	b.n	800293c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800294c:	7bfb      	ldrb	r3, [r7, #15]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	fffeff88 	.word	0xfffeff88

0800295c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <TIM_Base_SetConfig+0x114>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029de:	d00f      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a3d      	ldr	r2, [pc, #244]	; (8002ad8 <TIM_Base_SetConfig+0x118>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a3c      	ldr	r2, [pc, #240]	; (8002adc <TIM_Base_SetConfig+0x11c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a3b      	ldr	r2, [pc, #236]	; (8002ae0 <TIM_Base_SetConfig+0x120>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d003      	beq.n	8002a00 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3a      	ldr	r2, [pc, #232]	; (8002ae4 <TIM_Base_SetConfig+0x124>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d108      	bne.n	8002a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <TIM_Base_SetConfig+0x114>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d027      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2c      	ldr	r2, [pc, #176]	; (8002ad8 <TIM_Base_SetConfig+0x118>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d023      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2b      	ldr	r2, [pc, #172]	; (8002adc <TIM_Base_SetConfig+0x11c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <TIM_Base_SetConfig+0x120>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <TIM_Base_SetConfig+0x124>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <TIM_Base_SetConfig+0x128>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <TIM_Base_SetConfig+0x12c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00f      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <TIM_Base_SetConfig+0x130>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <TIM_Base_SetConfig+0x134>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <TIM_Base_SetConfig+0x138>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a23      	ldr	r2, [pc, #140]	; (8002afc <TIM_Base_SetConfig+0x13c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <TIM_Base_SetConfig+0x114>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_Base_SetConfig+0xf8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a0c      	ldr	r2, [pc, #48]	; (8002ae4 <TIM_Base_SetConfig+0x124>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	615a      	str	r2, [r3, #20]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40010400 	.word	0x40010400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800
 8002af4:	40001800 	.word	0x40001800
 8002af8:	40001c00 	.word	0x40001c00
 8002afc:	40002000 	.word	0x40002000

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 030a 	bic.w	r3, r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b087      	sub	sp, #28
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f023 0210 	bic.w	r2, r3, #16
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	031b      	lsls	r3, r3, #12
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f043 0307 	orr.w	r3, r3, #7
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	609a      	str	r2, [r3, #8]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	371c      	adds	r7, #28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e06d      	b.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d108      	bne.n	8002c92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d022      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d01d      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1d      	ldr	r2, [pc, #116]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d018      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a15      	ldr	r2, [pc, #84]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10c      	bne.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40001800 	.word	0x40001800

08002d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e040      	b.n	8002e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd feba 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2224      	movs	r2, #36	; 0x24
 8002db8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8b0 	bl	8002f30 <UART_SetConfig>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb08 	bl	80033f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb8f 	bl	800353c <UART_CheckIdleState>
 8002e1e:	4603      	mov	r3, r0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d171      	bne.n	8002f24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Transmit+0x24>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e06a      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2221      	movs	r2, #33	; 0x21
 8002e5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e5e:	f7fd ff3d 	bl	8000cdc <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d108      	bne.n	8002e90 <HAL_UART_Transmit+0x68>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	e003      	b.n	8002e98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e98:	e02c      	b.n	8002ef4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fb96 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e038      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e007      	b.n	8002ee2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	781a      	ldrb	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1cc      	bne.n	8002e9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2140      	movs	r1, #64	; 0x40
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fb63 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e005      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3720      	adds	r7, #32
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <UART_SetConfig+0x2c4>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	6979      	ldr	r1, [r7, #20]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a94      	ldr	r2, [pc, #592]	; (80031f8 <UART_SetConfig+0x2c8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d120      	bne.n	8002fee <UART_SetConfig+0xbe>
 8002fac:	4b93      	ldr	r3, [pc, #588]	; (80031fc <UART_SetConfig+0x2cc>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d816      	bhi.n	8002fe8 <UART_SetConfig+0xb8>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0x90>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fdd 	.word	0x08002fdd
 8002fc8:	08002fd7 	.word	0x08002fd7
 8002fcc:	08002fe3 	.word	0x08002fe3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	77fb      	strb	r3, [r7, #31]
 8002fd4:	e150      	b.n	8003278 <UART_SetConfig+0x348>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e14d      	b.n	8003278 <UART_SetConfig+0x348>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	77fb      	strb	r3, [r7, #31]
 8002fe0:	e14a      	b.n	8003278 <UART_SetConfig+0x348>
 8002fe2:	2308      	movs	r3, #8
 8002fe4:	77fb      	strb	r3, [r7, #31]
 8002fe6:	e147      	b.n	8003278 <UART_SetConfig+0x348>
 8002fe8:	2310      	movs	r3, #16
 8002fea:	77fb      	strb	r3, [r7, #31]
 8002fec:	e144      	b.n	8003278 <UART_SetConfig+0x348>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a83      	ldr	r2, [pc, #524]	; (8003200 <UART_SetConfig+0x2d0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d132      	bne.n	800305e <UART_SetConfig+0x12e>
 8002ff8:	4b80      	ldr	r3, [pc, #512]	; (80031fc <UART_SetConfig+0x2cc>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d828      	bhi.n	8003058 <UART_SetConfig+0x128>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <UART_SetConfig+0xdc>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	08003041 	.word	0x08003041
 8003010:	08003059 	.word	0x08003059
 8003014:	08003059 	.word	0x08003059
 8003018:	08003059 	.word	0x08003059
 800301c:	0800304d 	.word	0x0800304d
 8003020:	08003059 	.word	0x08003059
 8003024:	08003059 	.word	0x08003059
 8003028:	08003059 	.word	0x08003059
 800302c:	08003047 	.word	0x08003047
 8003030:	08003059 	.word	0x08003059
 8003034:	08003059 	.word	0x08003059
 8003038:	08003059 	.word	0x08003059
 800303c:	08003053 	.word	0x08003053
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e118      	b.n	8003278 <UART_SetConfig+0x348>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e115      	b.n	8003278 <UART_SetConfig+0x348>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e112      	b.n	8003278 <UART_SetConfig+0x348>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e10f      	b.n	8003278 <UART_SetConfig+0x348>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e10c      	b.n	8003278 <UART_SetConfig+0x348>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a68      	ldr	r2, [pc, #416]	; (8003204 <UART_SetConfig+0x2d4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d120      	bne.n	80030aa <UART_SetConfig+0x17a>
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <UART_SetConfig+0x2cc>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003072:	2b30      	cmp	r3, #48	; 0x30
 8003074:	d013      	beq.n	800309e <UART_SetConfig+0x16e>
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d814      	bhi.n	80030a4 <UART_SetConfig+0x174>
 800307a:	2b20      	cmp	r3, #32
 800307c:	d009      	beq.n	8003092 <UART_SetConfig+0x162>
 800307e:	2b20      	cmp	r3, #32
 8003080:	d810      	bhi.n	80030a4 <UART_SetConfig+0x174>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <UART_SetConfig+0x15c>
 8003086:	2b10      	cmp	r3, #16
 8003088:	d006      	beq.n	8003098 <UART_SetConfig+0x168>
 800308a:	e00b      	b.n	80030a4 <UART_SetConfig+0x174>
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e0f2      	b.n	8003278 <UART_SetConfig+0x348>
 8003092:	2302      	movs	r3, #2
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e0ef      	b.n	8003278 <UART_SetConfig+0x348>
 8003098:	2304      	movs	r3, #4
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e0ec      	b.n	8003278 <UART_SetConfig+0x348>
 800309e:	2308      	movs	r3, #8
 80030a0:	77fb      	strb	r3, [r7, #31]
 80030a2:	e0e9      	b.n	8003278 <UART_SetConfig+0x348>
 80030a4:	2310      	movs	r3, #16
 80030a6:	77fb      	strb	r3, [r7, #31]
 80030a8:	e0e6      	b.n	8003278 <UART_SetConfig+0x348>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a56      	ldr	r2, [pc, #344]	; (8003208 <UART_SetConfig+0x2d8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d120      	bne.n	80030f6 <UART_SetConfig+0x1c6>
 80030b4:	4b51      	ldr	r3, [pc, #324]	; (80031fc <UART_SetConfig+0x2cc>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030be:	2bc0      	cmp	r3, #192	; 0xc0
 80030c0:	d013      	beq.n	80030ea <UART_SetConfig+0x1ba>
 80030c2:	2bc0      	cmp	r3, #192	; 0xc0
 80030c4:	d814      	bhi.n	80030f0 <UART_SetConfig+0x1c0>
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d009      	beq.n	80030de <UART_SetConfig+0x1ae>
 80030ca:	2b80      	cmp	r3, #128	; 0x80
 80030cc:	d810      	bhi.n	80030f0 <UART_SetConfig+0x1c0>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0x1a8>
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d006      	beq.n	80030e4 <UART_SetConfig+0x1b4>
 80030d6:	e00b      	b.n	80030f0 <UART_SetConfig+0x1c0>
 80030d8:	2300      	movs	r3, #0
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e0cc      	b.n	8003278 <UART_SetConfig+0x348>
 80030de:	2302      	movs	r3, #2
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e0c9      	b.n	8003278 <UART_SetConfig+0x348>
 80030e4:	2304      	movs	r3, #4
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e0c6      	b.n	8003278 <UART_SetConfig+0x348>
 80030ea:	2308      	movs	r3, #8
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e0c3      	b.n	8003278 <UART_SetConfig+0x348>
 80030f0:	2310      	movs	r3, #16
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e0c0      	b.n	8003278 <UART_SetConfig+0x348>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a44      	ldr	r2, [pc, #272]	; (800320c <UART_SetConfig+0x2dc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x21c>
 8003100:	4b3e      	ldr	r3, [pc, #248]	; (80031fc <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800310e:	d017      	beq.n	8003140 <UART_SetConfig+0x210>
 8003110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003114:	d817      	bhi.n	8003146 <UART_SetConfig+0x216>
 8003116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311a:	d00b      	beq.n	8003134 <UART_SetConfig+0x204>
 800311c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003120:	d811      	bhi.n	8003146 <UART_SetConfig+0x216>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <UART_SetConfig+0x1fe>
 8003126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312a:	d006      	beq.n	800313a <UART_SetConfig+0x20a>
 800312c:	e00b      	b.n	8003146 <UART_SetConfig+0x216>
 800312e:	2300      	movs	r3, #0
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e0a1      	b.n	8003278 <UART_SetConfig+0x348>
 8003134:	2302      	movs	r3, #2
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e09e      	b.n	8003278 <UART_SetConfig+0x348>
 800313a:	2304      	movs	r3, #4
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e09b      	b.n	8003278 <UART_SetConfig+0x348>
 8003140:	2308      	movs	r3, #8
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e098      	b.n	8003278 <UART_SetConfig+0x348>
 8003146:	2310      	movs	r3, #16
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e095      	b.n	8003278 <UART_SetConfig+0x348>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a2f      	ldr	r2, [pc, #188]	; (8003210 <UART_SetConfig+0x2e0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d125      	bne.n	80031a2 <UART_SetConfig+0x272>
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003164:	d017      	beq.n	8003196 <UART_SetConfig+0x266>
 8003166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800316a:	d817      	bhi.n	800319c <UART_SetConfig+0x26c>
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	d00b      	beq.n	800318a <UART_SetConfig+0x25a>
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d811      	bhi.n	800319c <UART_SetConfig+0x26c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x254>
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x260>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x26c>
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e076      	b.n	8003278 <UART_SetConfig+0x348>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e073      	b.n	8003278 <UART_SetConfig+0x348>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e070      	b.n	8003278 <UART_SetConfig+0x348>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e06d      	b.n	8003278 <UART_SetConfig+0x348>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e06a      	b.n	8003278 <UART_SetConfig+0x348>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <UART_SetConfig+0x2e4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d138      	bne.n	800321e <UART_SetConfig+0x2ee>
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <UART_SetConfig+0x2cc>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80031b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031ba:	d017      	beq.n	80031ec <UART_SetConfig+0x2bc>
 80031bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80031c0:	d82a      	bhi.n	8003218 <UART_SetConfig+0x2e8>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c6:	d00b      	beq.n	80031e0 <UART_SetConfig+0x2b0>
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d824      	bhi.n	8003218 <UART_SetConfig+0x2e8>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <UART_SetConfig+0x2aa>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d6:	d006      	beq.n	80031e6 <UART_SetConfig+0x2b6>
 80031d8:	e01e      	b.n	8003218 <UART_SetConfig+0x2e8>
 80031da:	2300      	movs	r3, #0
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e04b      	b.n	8003278 <UART_SetConfig+0x348>
 80031e0:	2302      	movs	r3, #2
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e048      	b.n	8003278 <UART_SetConfig+0x348>
 80031e6:	2304      	movs	r3, #4
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e045      	b.n	8003278 <UART_SetConfig+0x348>
 80031ec:	2308      	movs	r3, #8
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	e042      	b.n	8003278 <UART_SetConfig+0x348>
 80031f2:	bf00      	nop
 80031f4:	efff69f3 	.word	0xefff69f3
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40023800 	.word	0x40023800
 8003200:	40004400 	.word	0x40004400
 8003204:	40004800 	.word	0x40004800
 8003208:	40004c00 	.word	0x40004c00
 800320c:	40005000 	.word	0x40005000
 8003210:	40011400 	.word	0x40011400
 8003214:	40007800 	.word	0x40007800
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e02c      	b.n	8003278 <UART_SetConfig+0x348>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a72      	ldr	r2, [pc, #456]	; (80033ec <UART_SetConfig+0x4bc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d125      	bne.n	8003274 <UART_SetConfig+0x344>
 8003228:	4b71      	ldr	r3, [pc, #452]	; (80033f0 <UART_SetConfig+0x4c0>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003232:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003236:	d017      	beq.n	8003268 <UART_SetConfig+0x338>
 8003238:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800323c:	d817      	bhi.n	800326e <UART_SetConfig+0x33e>
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003242:	d00b      	beq.n	800325c <UART_SetConfig+0x32c>
 8003244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003248:	d811      	bhi.n	800326e <UART_SetConfig+0x33e>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <UART_SetConfig+0x326>
 800324e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003252:	d006      	beq.n	8003262 <UART_SetConfig+0x332>
 8003254:	e00b      	b.n	800326e <UART_SetConfig+0x33e>
 8003256:	2300      	movs	r3, #0
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e00d      	b.n	8003278 <UART_SetConfig+0x348>
 800325c:	2302      	movs	r3, #2
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e00a      	b.n	8003278 <UART_SetConfig+0x348>
 8003262:	2304      	movs	r3, #4
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e007      	b.n	8003278 <UART_SetConfig+0x348>
 8003268:	2308      	movs	r3, #8
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e004      	b.n	8003278 <UART_SetConfig+0x348>
 800326e:	2310      	movs	r3, #16
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e001      	b.n	8003278 <UART_SetConfig+0x348>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d15b      	bne.n	800333a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003282:	7ffb      	ldrb	r3, [r7, #31]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d828      	bhi.n	80032da <UART_SetConfig+0x3aa>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <UART_SetConfig+0x360>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032db 	.word	0x080032db
 80032a0:	080032cb 	.word	0x080032cb
 80032a4:	080032db 	.word	0x080032db
 80032a8:	080032db 	.word	0x080032db
 80032ac:	080032db 	.word	0x080032db
 80032b0:	080032d3 	.word	0x080032d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b4:	f7fe fc48 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 80032b8:	61b8      	str	r0, [r7, #24]
        break;
 80032ba:	e013      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032bc:	f7fe fc58 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 80032c0:	61b8      	str	r0, [r7, #24]
        break;
 80032c2:	e00f      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <UART_SetConfig+0x4c4>)
 80032c6:	61bb      	str	r3, [r7, #24]
        break;
 80032c8:	e00c      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ca:	f7fe fb6b 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 80032ce:	61b8      	str	r0, [r7, #24]
        break;
 80032d0:	e008      	b.n	80032e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d6:	61bb      	str	r3, [r7, #24]
        break;
 80032d8:	e004      	b.n	80032e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	77bb      	strb	r3, [r7, #30]
        break;
 80032e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d074      	beq.n	80033d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	005a      	lsls	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d916      	bls.n	8003334 <UART_SetConfig+0x404>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d212      	bcs.n	8003334 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f023 030f 	bic.w	r3, r3, #15
 8003316:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	b29b      	uxth	r3, r3
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	b29a      	uxth	r2, r3
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	4313      	orrs	r3, r2
 8003328:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	89fa      	ldrh	r2, [r7, #14]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	e04f      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77bb      	strb	r3, [r7, #30]
 8003338:	e04c      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d828      	bhi.n	8003392 <UART_SetConfig+0x462>
 8003340:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <UART_SetConfig+0x418>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003375 	.word	0x08003375
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003393 	.word	0x08003393
 8003358:	08003383 	.word	0x08003383
 800335c:	08003393 	.word	0x08003393
 8003360:	08003393 	.word	0x08003393
 8003364:	08003393 	.word	0x08003393
 8003368:	0800338b 	.word	0x0800338b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7fe fbec 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e013      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003374:	f7fe fbfc 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8003378:	61b8      	str	r0, [r7, #24]
        break;
 800337a:	e00f      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <UART_SetConfig+0x4c4>)
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e00c      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7fe fb0f 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8003386:	61b8      	str	r0, [r7, #24]
        break;
 8003388:	e008      	b.n	800339c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338e:	61bb      	str	r3, [r7, #24]
        break;
 8003390:	e004      	b.n	800339c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	77bb      	strb	r3, [r7, #30]
        break;
 800339a:	bf00      	nop
    }

    if (pclk != 0U)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d018      	beq.n	80033d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085a      	lsrs	r2, r3, #1
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b0f      	cmp	r3, #15
 80033ba:	d909      	bls.n	80033d0 <UART_SetConfig+0x4a0>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c2:	d205      	bcs.n	80033d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e001      	b.n	80033d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40007c00 	.word	0x40007c00
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400

080033f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01a      	beq.n	800350e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f6:	d10a      	bne.n	800350e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800354c:	f7fd fbc6 	bl	8000cdc <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d10e      	bne.n	800357e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f831 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e027      	b.n	80035ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d10e      	bne.n	80035aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f81b 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e011      	b.n	80035ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b09c      	sub	sp, #112	; 0x70
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	e0a7      	b.n	8003738 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	f000 80a3 	beq.w	8003738 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fd fb73 	bl	8000cdc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <UART_WaitOnFlagUntilTimeout+0x32>
 8003602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003604:	2b00      	cmp	r3, #0
 8003606:	d13f      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800361c:	667b      	str	r3, [r7, #100]	; 0x64
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003628:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800362c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e6      	bne.n	8003608 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3308      	adds	r3, #8
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800364a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	663b      	str	r3, [r7, #96]	; 0x60
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3308      	adds	r3, #8
 8003658:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800365a:	64ba      	str	r2, [r7, #72]	; 0x48
 800365c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e068      	b.n	800375a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d050      	beq.n	8003738 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a4:	d148      	bne.n	8003738 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
 80036d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e6      	bne.n	80036b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3308      	adds	r3, #8
 80036e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	613b      	str	r3, [r7, #16]
   return(result);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003702:	623a      	str	r2, [r7, #32]
 8003704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	69f9      	ldr	r1, [r7, #28]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e010      	b.n	800375a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	429a      	cmp	r2, r3
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	f43f af48 	beq.w	80035e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3770      	adds	r7, #112	; 0x70
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <siprintf>:
 8003764:	b40e      	push	{r1, r2, r3}
 8003766:	b500      	push	{lr}
 8003768:	b09c      	sub	sp, #112	; 0x70
 800376a:	ab1d      	add	r3, sp, #116	; 0x74
 800376c:	9002      	str	r0, [sp, #8]
 800376e:	9006      	str	r0, [sp, #24]
 8003770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003774:	4809      	ldr	r0, [pc, #36]	; (800379c <siprintf+0x38>)
 8003776:	9107      	str	r1, [sp, #28]
 8003778:	9104      	str	r1, [sp, #16]
 800377a:	4909      	ldr	r1, [pc, #36]	; (80037a0 <siprintf+0x3c>)
 800377c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003780:	9105      	str	r1, [sp, #20]
 8003782:	6800      	ldr	r0, [r0, #0]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	a902      	add	r1, sp, #8
 8003788:	f000 f992 	bl	8003ab0 <_svfiprintf_r>
 800378c:	9b02      	ldr	r3, [sp, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	b01c      	add	sp, #112	; 0x70
 8003794:	f85d eb04 	ldr.w	lr, [sp], #4
 8003798:	b003      	add	sp, #12
 800379a:	4770      	bx	lr
 800379c:	20000058 	.word	0x20000058
 80037a0:	ffff0208 	.word	0xffff0208

080037a4 <memset>:
 80037a4:	4402      	add	r2, r0
 80037a6:	4603      	mov	r3, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d100      	bne.n	80037ae <memset+0xa>
 80037ac:	4770      	bx	lr
 80037ae:	f803 1b01 	strb.w	r1, [r3], #1
 80037b2:	e7f9      	b.n	80037a8 <memset+0x4>

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000058 	.word	0x20000058

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4d0d      	ldr	r5, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2600      	movs	r6, #0
 80037cc:	42a6      	cmp	r6, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4d0b      	ldr	r5, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 fc6a 	bl	80040ac <_init>
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2600      	movs	r6, #0
 80037de:	42a6      	cmp	r6, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e8:	4798      	blx	r3
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f2:	4798      	blx	r3
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	08004138 	.word	0x08004138
 80037fc:	08004138 	.word	0x08004138
 8003800:	08004138 	.word	0x08004138
 8003804:	0800413c 	.word	0x0800413c

08003808 <__retarget_lock_acquire_recursive>:
 8003808:	4770      	bx	lr

0800380a <__retarget_lock_release_recursive>:
 800380a:	4770      	bx	lr

0800380c <_free_r>:
 800380c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800380e:	2900      	cmp	r1, #0
 8003810:	d044      	beq.n	800389c <_free_r+0x90>
 8003812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003816:	9001      	str	r0, [sp, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	f1a1 0404 	sub.w	r4, r1, #4
 800381e:	bfb8      	it	lt
 8003820:	18e4      	addlt	r4, r4, r3
 8003822:	f000 f8df 	bl	80039e4 <__malloc_lock>
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <_free_r+0x94>)
 8003828:	9801      	ldr	r0, [sp, #4]
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	b933      	cbnz	r3, 800383c <_free_r+0x30>
 800382e:	6063      	str	r3, [r4, #4]
 8003830:	6014      	str	r4, [r2, #0]
 8003832:	b003      	add	sp, #12
 8003834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003838:	f000 b8da 	b.w	80039f0 <__malloc_unlock>
 800383c:	42a3      	cmp	r3, r4
 800383e:	d908      	bls.n	8003852 <_free_r+0x46>
 8003840:	6825      	ldr	r5, [r4, #0]
 8003842:	1961      	adds	r1, r4, r5
 8003844:	428b      	cmp	r3, r1
 8003846:	bf01      	itttt	eq
 8003848:	6819      	ldreq	r1, [r3, #0]
 800384a:	685b      	ldreq	r3, [r3, #4]
 800384c:	1949      	addeq	r1, r1, r5
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	e7ed      	b.n	800382e <_free_r+0x22>
 8003852:	461a      	mov	r2, r3
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b10b      	cbz	r3, 800385c <_free_r+0x50>
 8003858:	42a3      	cmp	r3, r4
 800385a:	d9fa      	bls.n	8003852 <_free_r+0x46>
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	1855      	adds	r5, r2, r1
 8003860:	42a5      	cmp	r5, r4
 8003862:	d10b      	bne.n	800387c <_free_r+0x70>
 8003864:	6824      	ldr	r4, [r4, #0]
 8003866:	4421      	add	r1, r4
 8003868:	1854      	adds	r4, r2, r1
 800386a:	42a3      	cmp	r3, r4
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	d1e0      	bne.n	8003832 <_free_r+0x26>
 8003870:	681c      	ldr	r4, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	6053      	str	r3, [r2, #4]
 8003876:	440c      	add	r4, r1
 8003878:	6014      	str	r4, [r2, #0]
 800387a:	e7da      	b.n	8003832 <_free_r+0x26>
 800387c:	d902      	bls.n	8003884 <_free_r+0x78>
 800387e:	230c      	movs	r3, #12
 8003880:	6003      	str	r3, [r0, #0]
 8003882:	e7d6      	b.n	8003832 <_free_r+0x26>
 8003884:	6825      	ldr	r5, [r4, #0]
 8003886:	1961      	adds	r1, r4, r5
 8003888:	428b      	cmp	r3, r1
 800388a:	bf04      	itt	eq
 800388c:	6819      	ldreq	r1, [r3, #0]
 800388e:	685b      	ldreq	r3, [r3, #4]
 8003890:	6063      	str	r3, [r4, #4]
 8003892:	bf04      	itt	eq
 8003894:	1949      	addeq	r1, r1, r5
 8003896:	6021      	streq	r1, [r4, #0]
 8003898:	6054      	str	r4, [r2, #4]
 800389a:	e7ca      	b.n	8003832 <_free_r+0x26>
 800389c:	b003      	add	sp, #12
 800389e:	bd30      	pop	{r4, r5, pc}
 80038a0:	200002e4 	.word	0x200002e4

080038a4 <sbrk_aligned>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4e0e      	ldr	r6, [pc, #56]	; (80038e0 <sbrk_aligned+0x3c>)
 80038a8:	460c      	mov	r4, r1
 80038aa:	6831      	ldr	r1, [r6, #0]
 80038ac:	4605      	mov	r5, r0
 80038ae:	b911      	cbnz	r1, 80038b6 <sbrk_aligned+0x12>
 80038b0:	f000 fba6 	bl	8004000 <_sbrk_r>
 80038b4:	6030      	str	r0, [r6, #0]
 80038b6:	4621      	mov	r1, r4
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 fba1 	bl	8004000 <_sbrk_r>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	d00a      	beq.n	80038d8 <sbrk_aligned+0x34>
 80038c2:	1cc4      	adds	r4, r0, #3
 80038c4:	f024 0403 	bic.w	r4, r4, #3
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d007      	beq.n	80038dc <sbrk_aligned+0x38>
 80038cc:	1a21      	subs	r1, r4, r0
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 fb96 	bl	8004000 <_sbrk_r>
 80038d4:	3001      	adds	r0, #1
 80038d6:	d101      	bne.n	80038dc <sbrk_aligned+0x38>
 80038d8:	f04f 34ff 	mov.w	r4, #4294967295
 80038dc:	4620      	mov	r0, r4
 80038de:	bd70      	pop	{r4, r5, r6, pc}
 80038e0:	200002e8 	.word	0x200002e8

080038e4 <_malloc_r>:
 80038e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e8:	1ccd      	adds	r5, r1, #3
 80038ea:	f025 0503 	bic.w	r5, r5, #3
 80038ee:	3508      	adds	r5, #8
 80038f0:	2d0c      	cmp	r5, #12
 80038f2:	bf38      	it	cc
 80038f4:	250c      	movcc	r5, #12
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	4607      	mov	r7, r0
 80038fa:	db01      	blt.n	8003900 <_malloc_r+0x1c>
 80038fc:	42a9      	cmp	r1, r5
 80038fe:	d905      	bls.n	800390c <_malloc_r+0x28>
 8003900:	230c      	movs	r3, #12
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	2600      	movs	r6, #0
 8003906:	4630      	mov	r0, r6
 8003908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800390c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039e0 <_malloc_r+0xfc>
 8003910:	f000 f868 	bl	80039e4 <__malloc_lock>
 8003914:	f8d8 3000 	ldr.w	r3, [r8]
 8003918:	461c      	mov	r4, r3
 800391a:	bb5c      	cbnz	r4, 8003974 <_malloc_r+0x90>
 800391c:	4629      	mov	r1, r5
 800391e:	4638      	mov	r0, r7
 8003920:	f7ff ffc0 	bl	80038a4 <sbrk_aligned>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	4604      	mov	r4, r0
 8003928:	d155      	bne.n	80039d6 <_malloc_r+0xf2>
 800392a:	f8d8 4000 	ldr.w	r4, [r8]
 800392e:	4626      	mov	r6, r4
 8003930:	2e00      	cmp	r6, #0
 8003932:	d145      	bne.n	80039c0 <_malloc_r+0xdc>
 8003934:	2c00      	cmp	r4, #0
 8003936:	d048      	beq.n	80039ca <_malloc_r+0xe6>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	4631      	mov	r1, r6
 800393c:	4638      	mov	r0, r7
 800393e:	eb04 0903 	add.w	r9, r4, r3
 8003942:	f000 fb5d 	bl	8004000 <_sbrk_r>
 8003946:	4581      	cmp	r9, r0
 8003948:	d13f      	bne.n	80039ca <_malloc_r+0xe6>
 800394a:	6821      	ldr	r1, [r4, #0]
 800394c:	1a6d      	subs	r5, r5, r1
 800394e:	4629      	mov	r1, r5
 8003950:	4638      	mov	r0, r7
 8003952:	f7ff ffa7 	bl	80038a4 <sbrk_aligned>
 8003956:	3001      	adds	r0, #1
 8003958:	d037      	beq.n	80039ca <_malloc_r+0xe6>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	442b      	add	r3, r5
 800395e:	6023      	str	r3, [r4, #0]
 8003960:	f8d8 3000 	ldr.w	r3, [r8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d038      	beq.n	80039da <_malloc_r+0xf6>
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	42a2      	cmp	r2, r4
 800396c:	d12b      	bne.n	80039c6 <_malloc_r+0xe2>
 800396e:	2200      	movs	r2, #0
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	e00f      	b.n	8003994 <_malloc_r+0xb0>
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	1b52      	subs	r2, r2, r5
 8003978:	d41f      	bmi.n	80039ba <_malloc_r+0xd6>
 800397a:	2a0b      	cmp	r2, #11
 800397c:	d917      	bls.n	80039ae <_malloc_r+0xca>
 800397e:	1961      	adds	r1, r4, r5
 8003980:	42a3      	cmp	r3, r4
 8003982:	6025      	str	r5, [r4, #0]
 8003984:	bf18      	it	ne
 8003986:	6059      	strne	r1, [r3, #4]
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	bf08      	it	eq
 800398c:	f8c8 1000 	streq.w	r1, [r8]
 8003990:	5162      	str	r2, [r4, r5]
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	4638      	mov	r0, r7
 8003996:	f104 060b 	add.w	r6, r4, #11
 800399a:	f000 f829 	bl	80039f0 <__malloc_unlock>
 800399e:	f026 0607 	bic.w	r6, r6, #7
 80039a2:	1d23      	adds	r3, r4, #4
 80039a4:	1af2      	subs	r2, r6, r3
 80039a6:	d0ae      	beq.n	8003906 <_malloc_r+0x22>
 80039a8:	1b9b      	subs	r3, r3, r6
 80039aa:	50a3      	str	r3, [r4, r2]
 80039ac:	e7ab      	b.n	8003906 <_malloc_r+0x22>
 80039ae:	42a3      	cmp	r3, r4
 80039b0:	6862      	ldr	r2, [r4, #4]
 80039b2:	d1dd      	bne.n	8003970 <_malloc_r+0x8c>
 80039b4:	f8c8 2000 	str.w	r2, [r8]
 80039b8:	e7ec      	b.n	8003994 <_malloc_r+0xb0>
 80039ba:	4623      	mov	r3, r4
 80039bc:	6864      	ldr	r4, [r4, #4]
 80039be:	e7ac      	b.n	800391a <_malloc_r+0x36>
 80039c0:	4634      	mov	r4, r6
 80039c2:	6876      	ldr	r6, [r6, #4]
 80039c4:	e7b4      	b.n	8003930 <_malloc_r+0x4c>
 80039c6:	4613      	mov	r3, r2
 80039c8:	e7cc      	b.n	8003964 <_malloc_r+0x80>
 80039ca:	230c      	movs	r3, #12
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4638      	mov	r0, r7
 80039d0:	f000 f80e 	bl	80039f0 <__malloc_unlock>
 80039d4:	e797      	b.n	8003906 <_malloc_r+0x22>
 80039d6:	6025      	str	r5, [r4, #0]
 80039d8:	e7dc      	b.n	8003994 <_malloc_r+0xb0>
 80039da:	605b      	str	r3, [r3, #4]
 80039dc:	deff      	udf	#255	; 0xff
 80039de:	bf00      	nop
 80039e0:	200002e4 	.word	0x200002e4

080039e4 <__malloc_lock>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__malloc_lock+0x8>)
 80039e6:	f7ff bf0f 	b.w	8003808 <__retarget_lock_acquire_recursive>
 80039ea:	bf00      	nop
 80039ec:	200002e0 	.word	0x200002e0

080039f0 <__malloc_unlock>:
 80039f0:	4801      	ldr	r0, [pc, #4]	; (80039f8 <__malloc_unlock+0x8>)
 80039f2:	f7ff bf0a 	b.w	800380a <__retarget_lock_release_recursive>
 80039f6:	bf00      	nop
 80039f8:	200002e0 	.word	0x200002e0

080039fc <__ssputs_r>:
 80039fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a00:	688e      	ldr	r6, [r1, #8]
 8003a02:	461f      	mov	r7, r3
 8003a04:	42be      	cmp	r6, r7
 8003a06:	680b      	ldr	r3, [r1, #0]
 8003a08:	4682      	mov	sl, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4690      	mov	r8, r2
 8003a0e:	d82c      	bhi.n	8003a6a <__ssputs_r+0x6e>
 8003a10:	898a      	ldrh	r2, [r1, #12]
 8003a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a16:	d026      	beq.n	8003a66 <__ssputs_r+0x6a>
 8003a18:	6965      	ldr	r5, [r4, #20]
 8003a1a:	6909      	ldr	r1, [r1, #16]
 8003a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a20:	eba3 0901 	sub.w	r9, r3, r1
 8003a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a28:	1c7b      	adds	r3, r7, #1
 8003a2a:	444b      	add	r3, r9
 8003a2c:	106d      	asrs	r5, r5, #1
 8003a2e:	429d      	cmp	r5, r3
 8003a30:	bf38      	it	cc
 8003a32:	461d      	movcc	r5, r3
 8003a34:	0553      	lsls	r3, r2, #21
 8003a36:	d527      	bpl.n	8003a88 <__ssputs_r+0x8c>
 8003a38:	4629      	mov	r1, r5
 8003a3a:	f7ff ff53 	bl	80038e4 <_malloc_r>
 8003a3e:	4606      	mov	r6, r0
 8003a40:	b360      	cbz	r0, 8003a9c <__ssputs_r+0xa0>
 8003a42:	6921      	ldr	r1, [r4, #16]
 8003a44:	464a      	mov	r2, r9
 8003a46:	f000 faeb 	bl	8004020 <memcpy>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a54:	81a3      	strh	r3, [r4, #12]
 8003a56:	6126      	str	r6, [r4, #16]
 8003a58:	6165      	str	r5, [r4, #20]
 8003a5a:	444e      	add	r6, r9
 8003a5c:	eba5 0509 	sub.w	r5, r5, r9
 8003a60:	6026      	str	r6, [r4, #0]
 8003a62:	60a5      	str	r5, [r4, #8]
 8003a64:	463e      	mov	r6, r7
 8003a66:	42be      	cmp	r6, r7
 8003a68:	d900      	bls.n	8003a6c <__ssputs_r+0x70>
 8003a6a:	463e      	mov	r6, r7
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	4632      	mov	r2, r6
 8003a70:	4641      	mov	r1, r8
 8003a72:	f000 faab 	bl	8003fcc <memmove>
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	1b9b      	subs	r3, r3, r6
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	4433      	add	r3, r6
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	2000      	movs	r0, #0
 8003a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a88:	462a      	mov	r2, r5
 8003a8a:	f000 fad7 	bl	800403c <_realloc_r>
 8003a8e:	4606      	mov	r6, r0
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d1e0      	bne.n	8003a56 <__ssputs_r+0x5a>
 8003a94:	6921      	ldr	r1, [r4, #16]
 8003a96:	4650      	mov	r0, sl
 8003a98:	f7ff feb8 	bl	800380c <_free_r>
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	f8ca 3000 	str.w	r3, [sl]
 8003aa2:	89a3      	ldrh	r3, [r4, #12]
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8003aae:	e7e9      	b.n	8003a84 <__ssputs_r+0x88>

08003ab0 <_svfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	4698      	mov	r8, r3
 8003ab6:	898b      	ldrh	r3, [r1, #12]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	b09d      	sub	sp, #116	; 0x74
 8003abc:	4607      	mov	r7, r0
 8003abe:	460d      	mov	r5, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	d50e      	bpl.n	8003ae2 <_svfiprintf_r+0x32>
 8003ac4:	690b      	ldr	r3, [r1, #16]
 8003ac6:	b963      	cbnz	r3, 8003ae2 <_svfiprintf_r+0x32>
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	f7ff ff0b 	bl	80038e4 <_malloc_r>
 8003ace:	6028      	str	r0, [r5, #0]
 8003ad0:	6128      	str	r0, [r5, #16]
 8003ad2:	b920      	cbnz	r0, 8003ade <_svfiprintf_r+0x2e>
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	e0d0      	b.n	8003c80 <_svfiprintf_r+0x1d0>
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	616b      	str	r3, [r5, #20]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af0:	2330      	movs	r3, #48	; 0x30
 8003af2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c98 <_svfiprintf_r+0x1e8>
 8003af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003afa:	f04f 0901 	mov.w	r9, #1
 8003afe:	4623      	mov	r3, r4
 8003b00:	469a      	mov	sl, r3
 8003b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b06:	b10a      	cbz	r2, 8003b0c <_svfiprintf_r+0x5c>
 8003b08:	2a25      	cmp	r2, #37	; 0x25
 8003b0a:	d1f9      	bne.n	8003b00 <_svfiprintf_r+0x50>
 8003b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b10:	d00b      	beq.n	8003b2a <_svfiprintf_r+0x7a>
 8003b12:	465b      	mov	r3, fp
 8003b14:	4622      	mov	r2, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f7ff ff6f 	bl	80039fc <__ssputs_r>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f000 80a9 	beq.w	8003c76 <_svfiprintf_r+0x1c6>
 8003b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b26:	445a      	add	r2, fp
 8003b28:	9209      	str	r2, [sp, #36]	; 0x24
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80a1 	beq.w	8003c76 <_svfiprintf_r+0x1c6>
 8003b34:	2300      	movs	r3, #0
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b3e:	f10a 0a01 	add.w	sl, sl, #1
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	9307      	str	r3, [sp, #28]
 8003b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b4c:	4654      	mov	r4, sl
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b54:	4850      	ldr	r0, [pc, #320]	; (8003c98 <_svfiprintf_r+0x1e8>)
 8003b56:	f7fc fb7b 	bl	8000250 <memchr>
 8003b5a:	9a04      	ldr	r2, [sp, #16]
 8003b5c:	b9d8      	cbnz	r0, 8003b96 <_svfiprintf_r+0xe6>
 8003b5e:	06d0      	lsls	r0, r2, #27
 8003b60:	bf44      	itt	mi
 8003b62:	2320      	movmi	r3, #32
 8003b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b68:	0711      	lsls	r1, r2, #28
 8003b6a:	bf44      	itt	mi
 8003b6c:	232b      	movmi	r3, #43	; 0x2b
 8003b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b72:	f89a 3000 	ldrb.w	r3, [sl]
 8003b76:	2b2a      	cmp	r3, #42	; 0x2a
 8003b78:	d015      	beq.n	8003ba6 <_svfiprintf_r+0xf6>
 8003b7a:	9a07      	ldr	r2, [sp, #28]
 8003b7c:	4654      	mov	r4, sl
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f04f 0c0a 	mov.w	ip, #10
 8003b84:	4621      	mov	r1, r4
 8003b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b8a:	3b30      	subs	r3, #48	; 0x30
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d94d      	bls.n	8003c2c <_svfiprintf_r+0x17c>
 8003b90:	b1b0      	cbz	r0, 8003bc0 <_svfiprintf_r+0x110>
 8003b92:	9207      	str	r2, [sp, #28]
 8003b94:	e014      	b.n	8003bc0 <_svfiprintf_r+0x110>
 8003b96:	eba0 0308 	sub.w	r3, r0, r8
 8003b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	9304      	str	r3, [sp, #16]
 8003ba2:	46a2      	mov	sl, r4
 8003ba4:	e7d2      	b.n	8003b4c <_svfiprintf_r+0x9c>
 8003ba6:	9b03      	ldr	r3, [sp, #12]
 8003ba8:	1d19      	adds	r1, r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	9103      	str	r1, [sp, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfbb      	ittet	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb8:	9307      	strge	r3, [sp, #28]
 8003bba:	9307      	strlt	r3, [sp, #28]
 8003bbc:	bfb8      	it	lt
 8003bbe:	9204      	strlt	r2, [sp, #16]
 8003bc0:	7823      	ldrb	r3, [r4, #0]
 8003bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bc4:	d10c      	bne.n	8003be0 <_svfiprintf_r+0x130>
 8003bc6:	7863      	ldrb	r3, [r4, #1]
 8003bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bca:	d134      	bne.n	8003c36 <_svfiprintf_r+0x186>
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	9203      	str	r2, [sp, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bfb8      	it	lt
 8003bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bdc:	3402      	adds	r4, #2
 8003bde:	9305      	str	r3, [sp, #20]
 8003be0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003ca8 <_svfiprintf_r+0x1f8>
 8003be4:	7821      	ldrb	r1, [r4, #0]
 8003be6:	2203      	movs	r2, #3
 8003be8:	4650      	mov	r0, sl
 8003bea:	f7fc fb31 	bl	8000250 <memchr>
 8003bee:	b138      	cbz	r0, 8003c00 <_svfiprintf_r+0x150>
 8003bf0:	9b04      	ldr	r3, [sp, #16]
 8003bf2:	eba0 000a 	sub.w	r0, r0, sl
 8003bf6:	2240      	movs	r2, #64	; 0x40
 8003bf8:	4082      	lsls	r2, r0
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	3401      	adds	r4, #1
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c04:	4825      	ldr	r0, [pc, #148]	; (8003c9c <_svfiprintf_r+0x1ec>)
 8003c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c0a:	2206      	movs	r2, #6
 8003c0c:	f7fc fb20 	bl	8000250 <memchr>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d038      	beq.n	8003c86 <_svfiprintf_r+0x1d6>
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <_svfiprintf_r+0x1f0>)
 8003c16:	bb1b      	cbnz	r3, 8003c60 <_svfiprintf_r+0x1b0>
 8003c18:	9b03      	ldr	r3, [sp, #12]
 8003c1a:	3307      	adds	r3, #7
 8003c1c:	f023 0307 	bic.w	r3, r3, #7
 8003c20:	3308      	adds	r3, #8
 8003c22:	9303      	str	r3, [sp, #12]
 8003c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c26:	4433      	add	r3, r6
 8003c28:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2a:	e768      	b.n	8003afe <_svfiprintf_r+0x4e>
 8003c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c30:	460c      	mov	r4, r1
 8003c32:	2001      	movs	r0, #1
 8003c34:	e7a6      	b.n	8003b84 <_svfiprintf_r+0xd4>
 8003c36:	2300      	movs	r3, #0
 8003c38:	3401      	adds	r4, #1
 8003c3a:	9305      	str	r3, [sp, #20]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f04f 0c0a 	mov.w	ip, #10
 8003c42:	4620      	mov	r0, r4
 8003c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c48:	3a30      	subs	r2, #48	; 0x30
 8003c4a:	2a09      	cmp	r2, #9
 8003c4c:	d903      	bls.n	8003c56 <_svfiprintf_r+0x1a6>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0c6      	beq.n	8003be0 <_svfiprintf_r+0x130>
 8003c52:	9105      	str	r1, [sp, #20]
 8003c54:	e7c4      	b.n	8003be0 <_svfiprintf_r+0x130>
 8003c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e7f0      	b.n	8003c42 <_svfiprintf_r+0x192>
 8003c60:	ab03      	add	r3, sp, #12
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	462a      	mov	r2, r5
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <_svfiprintf_r+0x1f4>)
 8003c68:	a904      	add	r1, sp, #16
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	f3af 8000 	nop.w
 8003c70:	1c42      	adds	r2, r0, #1
 8003c72:	4606      	mov	r6, r0
 8003c74:	d1d6      	bne.n	8003c24 <_svfiprintf_r+0x174>
 8003c76:	89ab      	ldrh	r3, [r5, #12]
 8003c78:	065b      	lsls	r3, r3, #25
 8003c7a:	f53f af2d 	bmi.w	8003ad8 <_svfiprintf_r+0x28>
 8003c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c80:	b01d      	add	sp, #116	; 0x74
 8003c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c86:	ab03      	add	r3, sp, #12
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	462a      	mov	r2, r5
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <_svfiprintf_r+0x1f4>)
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	4638      	mov	r0, r7
 8003c92:	f000 f879 	bl	8003d88 <_printf_i>
 8003c96:	e7eb      	b.n	8003c70 <_svfiprintf_r+0x1c0>
 8003c98:	080040fc 	.word	0x080040fc
 8003c9c:	08004106 	.word	0x08004106
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	080039fd 	.word	0x080039fd
 8003ca8:	08004102 	.word	0x08004102

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf8:	1e13      	subs	r3, r2, #0
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c0      	blx	r8
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	f003 0306 	and.w	r3, r3, #6
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	bf02      	ittt	eq
 8003d1e:	68e5      	ldreq	r5, [r4, #12]
 8003d20:	6833      	ldreq	r3, [r6, #0]
 8003d22:	1aed      	subeq	r5, r5, r3
 8003d24:	68a3      	ldr	r3, [r4, #8]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4649      	mov	r1, r9
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	; 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d90:	2f78      	cmp	r7, #120	; 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	; 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d4 	beq.w	8003f52 <_printf_i+0x1ca>
 8003daa:	2f58      	cmp	r7, #88	; 0x58
 8003dac:	f000 80c0 	beq.w	8003f30 <_printf_i+0x1a8>
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	; (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f39 	.word	0x08003f39
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003ef3 	.word	0x08003ef3
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f5b 	.word	0x08003f5b
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003efb 	.word	0x08003efb
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	602a      	str	r2, [r5, #0]
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09f      	b.n	8003f74 <_printf_i+0x1ec>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	0607      	lsls	r7, r0, #24
 8003e3a:	f103 0104 	add.w	r1, r3, #4
 8003e3e:	6029      	str	r1, [r5, #0]
 8003e40:	d501      	bpl.n	8003e46 <_printf_i+0xbe>
 8003e42:	681e      	ldr	r6, [r3, #0]
 8003e44:	e003      	b.n	8003e4e <_printf_i+0xc6>
 8003e46:	0646      	lsls	r6, r0, #25
 8003e48:	d5fb      	bpl.n	8003e42 <_printf_i+0xba>
 8003e4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e4e:	2e00      	cmp	r6, #0
 8003e50:	da03      	bge.n	8003e5a <_printf_i+0xd2>
 8003e52:	232d      	movs	r3, #45	; 0x2d
 8003e54:	4276      	negs	r6, r6
 8003e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e5a:	485a      	ldr	r0, [pc, #360]	; (8003fc4 <_printf_i+0x23c>)
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	e012      	b.n	8003e86 <_printf_i+0xfe>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	1d19      	adds	r1, r3, #4
 8003e66:	6029      	str	r1, [r5, #0]
 8003e68:	0605      	lsls	r5, r0, #24
 8003e6a:	d501      	bpl.n	8003e70 <_printf_i+0xe8>
 8003e6c:	681e      	ldr	r6, [r3, #0]
 8003e6e:	e002      	b.n	8003e76 <_printf_i+0xee>
 8003e70:	0641      	lsls	r1, r0, #25
 8003e72:	d5fb      	bpl.n	8003e6c <_printf_i+0xe4>
 8003e74:	881e      	ldrh	r6, [r3, #0]
 8003e76:	4853      	ldr	r0, [pc, #332]	; (8003fc4 <_printf_i+0x23c>)
 8003e78:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2308      	moveq	r3, #8
 8003e7e:	230a      	movne	r3, #10
 8003e80:	2100      	movs	r1, #0
 8003e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e86:	6865      	ldr	r5, [r4, #4]
 8003e88:	60a5      	str	r5, [r4, #8]
 8003e8a:	2d00      	cmp	r5, #0
 8003e8c:	bfa2      	ittt	ge
 8003e8e:	6821      	ldrge	r1, [r4, #0]
 8003e90:	f021 0104 	bicge.w	r1, r1, #4
 8003e94:	6021      	strge	r1, [r4, #0]
 8003e96:	b90e      	cbnz	r6, 8003e9c <_printf_i+0x114>
 8003e98:	2d00      	cmp	r5, #0
 8003e9a:	d04b      	beq.n	8003f34 <_printf_i+0x1ac>
 8003e9c:	4615      	mov	r5, r2
 8003e9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ea6:	5dc7      	ldrb	r7, [r0, r7]
 8003ea8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eac:	4637      	mov	r7, r6
 8003eae:	42bb      	cmp	r3, r7
 8003eb0:	460e      	mov	r6, r1
 8003eb2:	d9f4      	bls.n	8003e9e <_printf_i+0x116>
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d10b      	bne.n	8003ed0 <_printf_i+0x148>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	07de      	lsls	r6, r3, #31
 8003ebc:	d508      	bpl.n	8003ed0 <_printf_i+0x148>
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6861      	ldr	r1, [r4, #4]
 8003ec2:	4299      	cmp	r1, r3
 8003ec4:	bfde      	ittt	le
 8003ec6:	2330      	movle	r3, #48	; 0x30
 8003ec8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ecc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed0:	1b52      	subs	r2, r2, r5
 8003ed2:	6122      	str	r2, [r4, #16]
 8003ed4:	f8cd a000 	str.w	sl, [sp]
 8003ed8:	464b      	mov	r3, r9
 8003eda:	aa03      	add	r2, sp, #12
 8003edc:	4621      	mov	r1, r4
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7ff fee4 	bl	8003cac <_printf_common>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d14a      	bne.n	8003f7e <_printf_i+0x1f6>
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	b004      	add	sp, #16
 8003eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	f043 0320 	orr.w	r3, r3, #32
 8003ef8:	6023      	str	r3, [r4, #0]
 8003efa:	4833      	ldr	r0, [pc, #204]	; (8003fc8 <_printf_i+0x240>)
 8003efc:	2778      	movs	r7, #120	; 0x78
 8003efe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	6829      	ldr	r1, [r5, #0]
 8003f06:	061f      	lsls	r7, r3, #24
 8003f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f0c:	d402      	bmi.n	8003f14 <_printf_i+0x18c>
 8003f0e:	065f      	lsls	r7, r3, #25
 8003f10:	bf48      	it	mi
 8003f12:	b2b6      	uxthmi	r6, r6
 8003f14:	07df      	lsls	r7, r3, #31
 8003f16:	bf48      	it	mi
 8003f18:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1c:	6029      	str	r1, [r5, #0]
 8003f1e:	bf48      	it	mi
 8003f20:	6023      	strmi	r3, [r4, #0]
 8003f22:	b91e      	cbnz	r6, 8003f2c <_printf_i+0x1a4>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f023 0320 	bic.w	r3, r3, #32
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	e7a7      	b.n	8003e80 <_printf_i+0xf8>
 8003f30:	4824      	ldr	r0, [pc, #144]	; (8003fc4 <_printf_i+0x23c>)
 8003f32:	e7e4      	b.n	8003efe <_printf_i+0x176>
 8003f34:	4615      	mov	r5, r2
 8003f36:	e7bd      	b.n	8003eb4 <_printf_i+0x12c>
 8003f38:	682b      	ldr	r3, [r5, #0]
 8003f3a:	6826      	ldr	r6, [r4, #0]
 8003f3c:	6961      	ldr	r1, [r4, #20]
 8003f3e:	1d18      	adds	r0, r3, #4
 8003f40:	6028      	str	r0, [r5, #0]
 8003f42:	0635      	lsls	r5, r6, #24
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	d501      	bpl.n	8003f4c <_printf_i+0x1c4>
 8003f48:	6019      	str	r1, [r3, #0]
 8003f4a:	e002      	b.n	8003f52 <_printf_i+0x1ca>
 8003f4c:	0670      	lsls	r0, r6, #25
 8003f4e:	d5fb      	bpl.n	8003f48 <_printf_i+0x1c0>
 8003f50:	8019      	strh	r1, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	6123      	str	r3, [r4, #16]
 8003f56:	4615      	mov	r5, r2
 8003f58:	e7bc      	b.n	8003ed4 <_printf_i+0x14c>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	602a      	str	r2, [r5, #0]
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	4628      	mov	r0, r5
 8003f68:	f7fc f972 	bl	8000250 <memchr>
 8003f6c:	b108      	cbz	r0, 8003f72 <_printf_i+0x1ea>
 8003f6e:	1b40      	subs	r0, r0, r5
 8003f70:	6060      	str	r0, [r4, #4]
 8003f72:	6863      	ldr	r3, [r4, #4]
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	2300      	movs	r3, #0
 8003f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7c:	e7aa      	b.n	8003ed4 <_printf_i+0x14c>
 8003f7e:	6923      	ldr	r3, [r4, #16]
 8003f80:	462a      	mov	r2, r5
 8003f82:	4649      	mov	r1, r9
 8003f84:	4640      	mov	r0, r8
 8003f86:	47d0      	blx	sl
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d0ad      	beq.n	8003ee8 <_printf_i+0x160>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	079b      	lsls	r3, r3, #30
 8003f90:	d413      	bmi.n	8003fba <_printf_i+0x232>
 8003f92:	68e0      	ldr	r0, [r4, #12]
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	4298      	cmp	r0, r3
 8003f98:	bfb8      	it	lt
 8003f9a:	4618      	movlt	r0, r3
 8003f9c:	e7a6      	b.n	8003eec <_printf_i+0x164>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	47d0      	blx	sl
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d09d      	beq.n	8003ee8 <_printf_i+0x160>
 8003fac:	3501      	adds	r5, #1
 8003fae:	68e3      	ldr	r3, [r4, #12]
 8003fb0:	9903      	ldr	r1, [sp, #12]
 8003fb2:	1a5b      	subs	r3, r3, r1
 8003fb4:	42ab      	cmp	r3, r5
 8003fb6:	dcf2      	bgt.n	8003f9e <_printf_i+0x216>
 8003fb8:	e7eb      	b.n	8003f92 <_printf_i+0x20a>
 8003fba:	2500      	movs	r5, #0
 8003fbc:	f104 0619 	add.w	r6, r4, #25
 8003fc0:	e7f5      	b.n	8003fae <_printf_i+0x226>
 8003fc2:	bf00      	nop
 8003fc4:	0800410d 	.word	0x0800410d
 8003fc8:	0800411e 	.word	0x0800411e

08003fcc <memmove>:
 8003fcc:	4288      	cmp	r0, r1
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	eb01 0402 	add.w	r4, r1, r2
 8003fd4:	d902      	bls.n	8003fdc <memmove+0x10>
 8003fd6:	4284      	cmp	r4, r0
 8003fd8:	4623      	mov	r3, r4
 8003fda:	d807      	bhi.n	8003fec <memmove+0x20>
 8003fdc:	1e43      	subs	r3, r0, #1
 8003fde:	42a1      	cmp	r1, r4
 8003fe0:	d008      	beq.n	8003ff4 <memmove+0x28>
 8003fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fea:	e7f8      	b.n	8003fde <memmove+0x12>
 8003fec:	4402      	add	r2, r0
 8003fee:	4601      	mov	r1, r0
 8003ff0:	428a      	cmp	r2, r1
 8003ff2:	d100      	bne.n	8003ff6 <memmove+0x2a>
 8003ff4:	bd10      	pop	{r4, pc}
 8003ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ffe:	e7f7      	b.n	8003ff0 <memmove+0x24>

08004000 <_sbrk_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d06      	ldr	r5, [pc, #24]	; (800401c <_sbrk_r+0x1c>)
 8004004:	2300      	movs	r3, #0
 8004006:	4604      	mov	r4, r0
 8004008:	4608      	mov	r0, r1
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	f7fc fc32 	bl	8000874 <_sbrk>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_sbrk_r+0x1a>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_sbrk_r+0x1a>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	200002dc 	.word	0x200002dc

08004020 <memcpy>:
 8004020:	440a      	add	r2, r1
 8004022:	4291      	cmp	r1, r2
 8004024:	f100 33ff 	add.w	r3, r0, #4294967295
 8004028:	d100      	bne.n	800402c <memcpy+0xc>
 800402a:	4770      	bx	lr
 800402c:	b510      	push	{r4, lr}
 800402e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004036:	4291      	cmp	r1, r2
 8004038:	d1f9      	bne.n	800402e <memcpy+0xe>
 800403a:	bd10      	pop	{r4, pc}

0800403c <_realloc_r>:
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	4680      	mov	r8, r0
 8004042:	4614      	mov	r4, r2
 8004044:	460e      	mov	r6, r1
 8004046:	b921      	cbnz	r1, 8004052 <_realloc_r+0x16>
 8004048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4611      	mov	r1, r2
 800404e:	f7ff bc49 	b.w	80038e4 <_malloc_r>
 8004052:	b92a      	cbnz	r2, 8004060 <_realloc_r+0x24>
 8004054:	f7ff fbda 	bl	800380c <_free_r>
 8004058:	4625      	mov	r5, r4
 800405a:	4628      	mov	r0, r5
 800405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004060:	f000 f81b 	bl	800409a <_malloc_usable_size_r>
 8004064:	4284      	cmp	r4, r0
 8004066:	4607      	mov	r7, r0
 8004068:	d802      	bhi.n	8004070 <_realloc_r+0x34>
 800406a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800406e:	d812      	bhi.n	8004096 <_realloc_r+0x5a>
 8004070:	4621      	mov	r1, r4
 8004072:	4640      	mov	r0, r8
 8004074:	f7ff fc36 	bl	80038e4 <_malloc_r>
 8004078:	4605      	mov	r5, r0
 800407a:	2800      	cmp	r0, #0
 800407c:	d0ed      	beq.n	800405a <_realloc_r+0x1e>
 800407e:	42bc      	cmp	r4, r7
 8004080:	4622      	mov	r2, r4
 8004082:	4631      	mov	r1, r6
 8004084:	bf28      	it	cs
 8004086:	463a      	movcs	r2, r7
 8004088:	f7ff ffca 	bl	8004020 <memcpy>
 800408c:	4631      	mov	r1, r6
 800408e:	4640      	mov	r0, r8
 8004090:	f7ff fbbc 	bl	800380c <_free_r>
 8004094:	e7e1      	b.n	800405a <_realloc_r+0x1e>
 8004096:	4635      	mov	r5, r6
 8004098:	e7df      	b.n	800405a <_realloc_r+0x1e>

0800409a <_malloc_usable_size_r>:
 800409a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409e:	1f18      	subs	r0, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bfbc      	itt	lt
 80040a4:	580b      	ldrlt	r3, [r1, r0]
 80040a6:	18c0      	addlt	r0, r0, r3
 80040a8:	4770      	bx	lr
	...

080040ac <_init>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr

080040b8 <_fini>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr
